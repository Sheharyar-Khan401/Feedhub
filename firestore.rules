rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // User role based checks
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Feedbacks collection rules
    match /feedbacks/{feedbackId} {
      // Allow any authenticated user to read feedbacks
      allow read: if isAuthenticated();
      
      // Allow any authenticated user to create new feedbacks
      allow create: if isAuthenticated();
      
      // Allow updates in two cases:
      // 1. The feedback creator can update anything
      // 2. Any authenticated user can update only the votes and submittedBy arrays
      allow update: if isAuthenticated() && 
                   (
                     // Case 1: Feedback creator can update anything
                     resource.data.createdBy == request.auth.uid ||
                     
                     // Case 2: Any user can update only the votes and submittedBy arrays
                     (
                       // Check if only votes and submittedBy fields are being modified
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes', 'submittedBy'])
                     )
                   );
      
      // Only the feedback creator can delete their feedback
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 